<resources>
    <string name="app_name">DesignModelMaster</string>
    <array name="design_principle">
        <item>
            "\n"
            "\n"
            一 单一职责原则 SRP
            "\n"
            "\n"

            就一个类而言,应该仅有一个引起它变化的原因.
            "\n"
            ok,简单点就是说一个类的功能和职责应该是单一的,是一组相关性很高的函数和数据的封装.
            "\n"
            要尽量清楚职责的划分,单一职责的划分根据每个人的经验可能都不一样     "\n"
            超出自己职责范围的功能提出来交给其他类     "\n"
            将一个很复杂的功能封装在一个类中是不好的,
            "\n"正确的是封装在一组类中(以前老大经常跟我说一个类不要超过x百行代码)     "\n"

            比如我们自己封装一个log工具类,包括可以控制全局是否打印log,
            "\n"自动获取类名作为TAG,在log信息后附加
            "\n"方法名丶线程丶机型丶网络环境信息,这样方便调试.
            "\n"
            这里的附加信息的获取就应该单独提出来,因为这些信息的获取不属于打印log的职责范围内,并且其他地方也可能需要获取这些信息.
        </item>
        <item>
            "\n"
            "\n"
            二 开闭原则 OCP
            "\n"
            "\n"
            软件中的对象(类,模块,函数等)应该对于
            "\n"扩展是开放的,但是,对于修改是封闭的.
            "\n"
            简单说就是,你现在写的代码在面对需求变更
            "\n"时能够这样轻松应对:通过继承来实现新需求,不修改内部代码
            "\n"
            这里的继承包括继承+实现
            "\n"
            内部代码只因错误修改,而不能是因为新增的需求

        </item>
        <item>
            "\n"
            "\n"
            三 里氏替换原则 LSP
            "\n"
            "\n"
            所有引用基类的地方必须能够透明的使用其子类对象.
            "\n"
            ok,简单点说,父类能出现的地方,子类就能出
            "\n"现,并且替换为子类也不会产生任何异常

        </item>
        <item>
            "\n"
            "\n"
            四 依赖倒置原则 DIP
            "\n"
            "\n"
            依赖倒置原则指代了一种特定的解耦形式,使得高层
            "\n"次的模块不依赖于低层次模块的实现细节,依赖模块被颠倒了.

            简单说就是样的:
            "\n"
            高层模块不应该依赖对方的低层模块,双方都应该依
            "\n"赖对方的抽象
            "\n" 抽象不依赖细节
            "\n"  细节应该依赖抽象

            对于"倒置"这个关键字我的理解是这样的,老板
            "\n"只跟老板谈项目,至于怎么去实现,那是你员工的事情,但是员工
            "\n"必须按照老板的安排做.

            在java语言中的具体表述就是:模块间的依赖通过抽象发
            "\n"生,实现类之间不发生直接的依赖关系,其依赖关系是通
            "\n"过抽象产生的.

            这里的抽象包括抽象类和接口

            举个栗子,在MVP模式下,这三个层次之间往往是通过接口交
            "\n"流的,Presenter持有View和Model的接口(IView,IModel),Persenter和实现类
            "\n"Viewiml丶Modeliml不会有任何关联(抽象不依赖细节),但是实现类Viewiml丶Modeliml必须实
            "\n"现IView,IModel中的方法(细节依赖抽象)

            依赖倒置原则可以让你的项目拥有变化的能力!

        </item>
        <item>
            "\n"
            "\n"
            五 接口隔离原则 ISP##
            "\n"
            "\n"
            类间的依赖关系应该建立在最小的接口上.

            简单说就是,让客户端依赖的接口尽可能的小

            这个原则是比较好理解的,抽象应该尽可能
            "\n"的小,没有必然联系的方法应该分别在不同的抽象中

        </item>
        <item>
            "\n"
            "\n"
            六 迪米特原则(最少知识原则) LOD
            "\n"
            "\n"
            迪米特原则又称为最少知识原则

            一个对象应该对其他对象有最少的了解

            在java中应该是这样体现的:一个类应该对自己需要耦
            "\n"合或调用的类知道的最少,类的内部如何实现与调用者或者依赖者没有关系.

            个人理解包含两个方面:

            需要调用的类应该最少
            对于调用的某个类,这个类内部,调用者应该知道的最少

            举栗子:还是前面的ImageLoder,缓存这块是已经搞定了.假如在某次
            "\n"加载图片中,缓存没找到就需要联网去服务器拿图片,并且需要
            "\n"存到缓存中以备下次直接从缓存加载
        </item>
    </array>


</resources>
